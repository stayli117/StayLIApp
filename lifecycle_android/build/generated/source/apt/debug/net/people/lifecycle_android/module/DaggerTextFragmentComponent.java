// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package net.people.lifecycle_android.module;

import dagger.MembersInjector;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import net.people.lifecycle_android.TextFragment;
import net.people.lifecycle_android.TextFragment_MembersInjector;
import net.people.lifecycle_android.database.CityDao;
import net.people.lifecycle_android.repo.CityRepo;
import net.people.lifecycle_android.repo.CityRepo_Factory;

public final class DaggerTextFragmentComponent implements TextFragmentComponent {
  private Provider<CityDao> provideCityDaoProvider;

  private Provider<CityRepo> cityRepoProvider;

  private Provider<TextViewModel> textViewModelProvider;

  private MembersInjector<TextFragment> textFragmentMembersInjector;

  private DaggerTextFragmentComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TextFragmentComponent create() {
    return builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideCityDaoProvider = CityModule_ProvideCityDaoFactory.create(builder.cityModule);

    this.cityRepoProvider = CityRepo_Factory.create(provideCityDaoProvider);

    this.textViewModelProvider =
        TextViewModel_Factory.create(MembersInjectors.<TextViewModel>noOp(), cityRepoProvider);

    this.textFragmentMembersInjector = TextFragment_MembersInjector.create(textViewModelProvider);
  }

  @Override
  public void inject(TextFragment textFragment) {
    textFragmentMembersInjector.injectMembers(textFragment);
  }

  public static final class Builder {
    private CityModule cityModule;

    private Builder() {}

    public TextFragmentComponent build() {
      if (cityModule == null) {
        this.cityModule = new CityModule();
      }
      return new DaggerTextFragmentComponent(this);
    }

    public Builder cityModule(CityModule cityModule) {
      this.cityModule = Preconditions.checkNotNull(cityModule);
      return this;
    }
  }
}
