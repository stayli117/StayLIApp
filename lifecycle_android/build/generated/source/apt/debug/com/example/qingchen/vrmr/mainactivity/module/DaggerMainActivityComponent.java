// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.qingchen.vrmr.mainactivity.module;

import com.example.qingchen.vrmr.DataBase.InfoDao;
import com.example.qingchen.vrmr.mainactivity.MainActivity;
import com.example.qingchen.vrmr.mainactivity.MainActivity_MembersInjector;
import com.example.qingchen.vrmr.mainactivity.repository.InfoRepository;
import com.example.qingchen.vrmr.mainactivity.repository.InfoRepository_Factory;
import dagger.MembersInjector;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerMainActivityComponent implements MainActivityComponent {
  private Provider<InfoDao> provideInfoDaoProvider;

  private Provider<InfoRepository> infoRepositoryProvider;

  private Provider<ProfileViewModel> profileViewModelProvider;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private DaggerMainActivityComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static MainActivityComponent create() {
    return builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideInfoDaoProvider = InfoModule_ProvideInfoDaoFactory.create(builder.infoModule);

    this.infoRepositoryProvider = InfoRepository_Factory.create(provideInfoDaoProvider);

    this.profileViewModelProvider =
        ProfileViewModel_Factory.create(
            MembersInjectors.<ProfileViewModel>noOp(), infoRepositoryProvider);

    this.mainActivityMembersInjector =
        MainActivity_MembersInjector.create(profileViewModelProvider);
  }

  @Override
  public void inject(MainActivity mainActivity) {
    mainActivityMembersInjector.injectMembers(mainActivity);
  }

  public static final class Builder {
    private InfoModule infoModule;

    private Builder() {}

    public MainActivityComponent build() {
      if (infoModule == null) {
        this.infoModule = new InfoModule();
      }
      return new DaggerMainActivityComponent(this);
    }

    public Builder infoModule(InfoModule infoModule) {
      this.infoModule = Preconditions.checkNotNull(infoModule);
      return this;
    }
  }
}
